name: Build Electron App for Windows

on:
  push:
    branches:
      - main

permissions:
  contents: write # 赋予写入内容的权限

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      package_version: ${{ steps.read_version.outputs.version }} # 将读取到的版本号作为 Job 输出

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Read package version # 读取 package.json 中的版本号，并设置为步骤输出
      id: read_version
      run: |
        PACKAGE_VERSION_VAL=$(node -p "require('./package.json').version")
        echo "PACKAGE_VERSION=$PACKAGE_VERSION_VAL" >> $GITHUB_ENV # 设置为 env 变量，方便本 Job 内使用
        echo "version=$PACKAGE_VERSION_VAL" >> $GITHUB_OUTPUT # 设置为 step output，以便传递给其他 Job
        echo "Detected package version: $PACKAGE_VERSION_VAL" # 👈 打印版本号，方便调试
      shell: bash # 确保使用 bash shell 执行

    - name: Install dependencies
      run: npm install

    - name: Make Electron app (Windows)
      run: npm run make

    - name: Upload Windows installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-app-windows
        path: out/make/* # 这个路径是 Electron Forge 产生的，应该没问题

  release:
    needs: build-windows # 依赖 build-windows Job
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # 下载到 'artifacts' 目录

    - name: Display downloaded artifact structure # 👈 新增：列出下载文件的结构，这是关键调试信息
      run: |
        echo "Listing contents of artifacts/test-app-windows/ recursively:"
        find artifacts/test-app-windows/ -type f -name "*.exe" # 👈 更精确地查找所有 .exe 文件
        find artifacts/test-app-windows/ -maxdepth 3 # 👈 打印前3层目录结构
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build-windows.outputs.package_version }}
        release_name: Release v${{ needs.build-windows.outputs.package_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Windows Installer)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # 再次修改 asset_path，这次使用更宽泛的通配符，在 test-app-windows 目录下递归查找所有 .exe 文件
        # 如果依然失败，那么问题肯定不在路径上，而是在文件是否真的被下载或存在
        asset_path: ${{ github.workspace }}/artifacts/test-app-windows/**/*.exe # 👈 使用双星号通配符，递归查找所有 .exe 文件
        asset_name: test-Windows-Installer-v${{ needs.build-windows.outputs.package_version }}.exe
        asset_content_type: application/octet-stream