name: Build Electron App for Windows

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      package_version: ${{ steps.read_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Read package version
      id: read_version
      run: |
        PACKAGE_VERSION_VAL=$(node -p "require('./package.json').version")
        echo "PACKAGE_VERSION=$PACKAGE_VERSION_VAL" >> $GITHUB_ENV
        echo "version=$PACKAGE_VERSION_VAL" >> $GITHUB_OUTPUT
        echo "Detected package version: $PACKAGE_VERSION_VAL"
      shell: bash

    - name: Install dependencies
      run: npm install

    - name: Make Electron app (Windows)
      run: npm run make

    - name: List build output
      run: |
        echo "Build output structure:"
        ls -la out/
        ls -la out/make/
        if [ -d "out/make/squirrel.windows" ]; then
          ls -la out/make/squirrel.windows/
          if [ -d "out/make/squirrel.windows/x64" ]; then
            ls -la out/make/squirrel.windows/x64/
          fi
        fi
        # List all .exe, RELEASES, .nupkg, and .yml files
        find out/ -name "*.exe" -type f
        find out/ -name "RELEASES" -type f
        find out/ -name "*.nupkg" -type f
        find out/ -name "*.yml" -type f # Look for .yml files including latest.yml
      shell: bash

    - name: Upload Windows installer and release files artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-app-windows
        # Upload the entire directory content, which should include .exe, RELEASES, and .nupkg
        # And now, specifically include the latest.yml from the 'out' directory
        path: |
          out/make/squirrel.windows/x64/
          out/*.yml # This line is crucial for including latest.yml

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-app-windows
        path: artifacts/test-app-windows

    - name: Display downloaded artifact structure
      run: |
        echo "Listing contents of artifacts/test-app-windows/ recursively:"
        find artifacts/test-app-windows/ -type f
        echo "Looking for .exe, RELEASES, .nupkg, and .yml files:"
        find artifacts/test-app-windows/ -name "*.exe" -type f
        find artifacts/test-app-windows/ -name "RELEASES" -type f
        find artifacts/test-app-windows/ -name "*.nupkg" -type f
        find artifacts/test-app-windows/ -name "*.yml" -type f # Check for .yml files here too

    - name: Find and set executable and other artifact paths
      id: find_paths
      run: |
        EXE_PATH=$(find artifacts/test-app-windows/ -name "*.exe" -type f | head -1)
        RELEASES_PATH=$(find artifacts/test-app-windows/ -name "RELEASES" -type f | head -1)
        NUPKG_PATH=$(find artifacts/test-app-windows/ -name "*.nupkg" -type f | head -1)
        LATEST_YML_PATH=$(find artifacts/test-app-windows/ -name "latest.yml" -type f | head -1) # Now find latest.yml

        if [ -z "$EXE_PATH" ]; then
          echo "No .exe file found!"
          exit 1
        fi
        if [ -z "$RELEASES_PATH" ]; then
          echo "No RELEASES file found!"
          exit 1
        fi
        if [ -z "$NUPKG_PATH" ]; then
          echo "No .nupkg file found!"
          exit 1
        fi
        if [ -z "$LATEST_YML_PATH" ]; then # Add check for latest.yml
          echo "No latest.yml file found!"
          exit 1
        fi

        echo "Found executable: $EXE_PATH"
        echo "Found RELEASES file: $RELEASES_PATH"
        echo "Found .nupkg file: $NUPKG_PATH"
        echo "Found latest.yml file: $LATEST_YML_PATH" # Log latest.yml

        # Output all found paths
        echo "exe_path=$EXE_PATH" >> $GITHUB_OUTPUT
        echo "releases_path=$RELEASES_PATH" >> $GITHUB_OUTPUT
        echo "nupkg_path=$NUPKG_PATH" >> $GITHUB_OUTPUT
        echo "latest_yml_path=$LATEST_YML_PATH" >> $GITHUB_OUTPUT # Output latest.yml path
      shell: bash

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.build-windows.outputs.package_version }}
        name: Release v${{ needs.build-windows.outputs.package_version }}
        draft: false
        prerelease: false
        # Attach all required files to the release
        files: |
          ${{ steps.find_paths.outputs.exe_path }}
          ${{ steps.find_paths.outputs.releases_path }}
          ${{ steps.find_paths.outputs.nupkg_path }}
          ${{ steps.find_paths.outputs.latest_yml_path }} # Add latest.yml here
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}