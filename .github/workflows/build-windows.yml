name: Build Electron App for Windows

on:
  push:
    branches:
      - main # 当代码推送到 main 分支时触发

permissions:
  contents: write # 赋予写入内容的权限

jobs:
  build-windows:
    runs-on: windows-latest # 只在最新的 Windows 虚拟机上运行
    outputs: # 👈 新增：定义 Job 的输出
      package_version: ${{ steps.read_version.outputs.version }} # 👈 将读取到的版本号作为 Job 输出

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 获取你的项目代码

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    - name: Read package version # 读取 package.json 中的版本号，并设置为步骤输出
      id: read_version # 👈 给这个步骤一个 ID
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT # 👈 将版本号写入 GITHUB_OUTPUT

    - name: Install dependencies
      run: npm install # 安装项目所需的所有依赖

    - name: Make Electron app (Windows)
      run: npm run make # 执行 package.json 中定义的 "make" 脚本

    - name: Upload Windows installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-app-windows # 上传产物的名称
        path: out/make/* # Electron Forge 默认会将 make 后的产物放在 out/make 目录下

  release:
    needs: build-windows # 👈 依赖 build-windows Job
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # 下载到 'artifacts' 目录

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # 👈 使用 build-windows Job 的输出版本号
        tag_name: v${{ needs.build-windows.outputs.package_version }}
        release_name: Release v${{ needs.build-windows.outputs.package_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Windows Installer)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # 👈 使用 build-windows Job 的输出版本号
        asset_path: ${{ github.workspace }}/artifacts/test-app-windows/squirrel.windows/x64/test-${{ needs.build-windows.outputs.package_version }} Setup.exe
        asset_name: test-Windows-Installer-v${{ needs.build-windows.outputs.package_version }}.exe
        asset_content_type: application/octet-stream